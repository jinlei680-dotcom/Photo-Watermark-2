name: Create Release on Tag

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: macos-latest
    steps:
      - name: Checkout (with LFS)
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Set up Xcode/Swift
        run: |
          swift --version

      - name: Build (Release)
        run: |
          swift build -c release

      - name: Build minimal .app bundle
        run: |
          set -e
          APP_NAME="PhotoWatermark"
          APP_DIR="dist/${APP_NAME}.app"
          mkdir -p "${APP_DIR}/Contents/MacOS"
          mkdir -p "${APP_DIR}/Contents/Resources"
          # Basic Info.plist
          cat > "${APP_DIR}/Contents/Info.plist" << 'PLIST'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>CFBundleName</key><string>PhotoWatermark</string>
            <key>CFBundleIdentifier</key><string>com.jinlei.photo-watermark</string>
            <key>CFBundleVersion</key><string>${{ github.ref_name }}</string>
            <key>CFBundleShortVersionString</key><string>${{ github.ref_name }}</string>
            <key>CFBundleExecutable</key><string>PhotoWatermark</string>
            <key>LSMinimumSystemVersion</key><string>10.15</string>
            <key>NSHighResolutionCapable</key><true/>
          </dict>
          </plist>
          PLIST
          # Copy built binary if exists
          if [ -f ".build/release/PhotoWatermark" ]; then
            cp .build/release/PhotoWatermark "${APP_DIR}/Contents/MacOS/PhotoWatermark"
          else
            echo "Built binary not found; failing" >&2
            exit 1
          fi

      - name: Add First-Run.command into dist
        run: |
          set -e
          cp First-Run.command dist/
          chmod +x dist/First-Run.command

      - name: Package unsigned DMG
        run: |
          set -e
          APP_NAME="PhotoWatermark"
          DMG_NAME="${APP_NAME}-${{ github.ref_name }}-macos.dmg"
          TMP_DIR="dist/dmgroot"
          mkdir -p "$TMP_DIR"
          cp -R "dist/${APP_NAME}.app" "$TMP_DIR/${APP_NAME}.app"
          cp "dist/First-Run.command" "$TMP_DIR/First-Run.command"
          hdiutil create -volname "${APP_NAME}" -srcfolder "$TMP_DIR" -ov -format UDZO "dist/${DMG_NAME}"

      - name: Package artifact
        run: |
          mkdir -p dist
          if [ -f ".build/release/PhotoWatermark" ]; then
            cp .build/release/PhotoWatermark dist/
            cd dist
            zip -r PhotoWatermark-${{ github.ref_name }}-macos.zip PhotoWatermark
          else
            # fallback: zip repository snapshot (heavy but reliable)
            cd ..
            zip -r dist/PhotoWatermark-${{ github.ref_name }}-macos.zip . -x "*.git*" -x "*.DS_Store"
          fi

      - name: Create GitHub Release and upload artifact
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ github.ref_name }}
          name: "PhotoWatermark ${{ github.ref_name }}"
          fail_on_unmatched_files: false
          body: |
            版本说明（${{ github.ref_name }}）

            分发方式：
            - 本版以“未签名 DMG”分发，下载后双击挂载即可使用，无需解压。

            首次运行指南（无代码签名/公证）：
            - 右键点击 `PhotoWatermark.app` → 选择“打开” → 在弹窗中再次“打开”。
            - 或 系统设置 → 隐私与安全性 → 允许打开来自未识别开发者的应用。
            - 高级：在终端执行 `xattr -dr com.apple.quarantine /Applications/PhotoWatermark.app` 去除隔离标记。

            功能更新（模板与持久化）：
            - 新增“水印模板功能”，启动自动恢复上一会话设置（隐式模板）。
            - 扩展 WatermarkSettingsDTO 覆盖完整参数：边距、导出格式、命名规则、前后缀、JPEG质量、尺寸模式与数值、导出目录路径。
            - ContentView 增加 `@State margin` 并统一用于预览与导出；完善 makeDTOFromUI / applyDTOToUI 的双向映射。

            构建与验证：
            - 已通过 `swift build -c release` 构建，并产出未签名 DMG。
            - 在本地验证预览与导出一致性，模板设置可跨会话恢复。
          files: |
            dist/PhotoWatermark-${{ github.ref_name }}-macos.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}